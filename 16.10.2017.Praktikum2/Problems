Зад. 1
Даден е текстов файл с име input.txt, в който всеки ред e в следния вид:
k: n1 n2 n3 ... nk;
Да се реализира функция, която прочита всички редове и за всеки ред записва в двоичен файл с име output.bin съответен 
запис, който съдържа сумата и произведението на числата в реда. Да се изведе съдържанието на файла output.bin на стандартния изход.
 
 
Зад. 2
Дадена е структурата
struct Gas
{
int counterId;
double quantity;
}; ,
която описва единична продажба на гориво в бензиностанцията "Газ при нас".
Полето counterId (с валидни стойности >= 1) означава номер на колонка, а quantity –
количество заредено гориво в литри.
В текстовия файл sales.txt са записани последователно редове от вида
<counterId> <quantity>
описващи информация за продажбите в "Газ при нас" в даден ден.
Да се напишат следните функции:
а) double totalForCounter(int counterId, double pricePerLiter), която
намира реализирания приход от колонка с даден номер, при дадена цена на литър гориво;
б) void writeAverages(), която записва в двоичния файл averages.bin числа от тип
double, като (i-1)-вото поред число означава средното количество гориво, заредено на
колонка с номер i, според текстовия файл sales.txt. В случай, че във файла sales.txt
няма информация за колонка с номер i, на съответната позиция в averages.bin да се
запише числото 0.

Зад. 3
Като използвате stl stack, напишете програма, която:
а) Симулира програмния стек при рекурсивната версия на числата на Фибоначи.
void fibonacci(int n, stack<int>& prev);
  fibonacci
  7
  1, 1, 2, 3, 5, 8, 13
  |8|
  |5|
  |3|
  |2|
  |1|
  |1|


б) Проверява дали в даден израз скобите ( от вида ‘<>’, ‘()‘, ‘{}‘, ‘[]‘ )  са правилно разположени.

Примери за коректно конструйрани изрази:
""
"ala bala"
"{}"
"()"
"[]"
"({})"
"({[[[()]]]})"
"<<()>>"
"{<[]>}"

Примери за the opposite:
"}{"
")("
"]["
"({[[[(]]]})"

Hint:
Трябва да върнем false, aко:
1). Празен стек && затваряща скоба;
2). Не празен стек && затварящата скоба е различна от тази на върха на стека;
3). Стекът не е празен в края.
ПС:
Може да използвате тези структирки:
struct bracketPair {
    char open;
    char close;
};

bracketPair supportedBrackets[] = {
    { '(', ')' },
    { '[', ']' },
    { '{', '}' },
    { '<', '>' }
};


